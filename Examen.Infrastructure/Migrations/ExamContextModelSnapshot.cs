// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(ExamContext))]
    partial class ExamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Catagorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Catagories");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Exemple", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Exemples");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Facture", b =>
                {
                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.HasKey("ProduitId", "FournisseurId");

                    b.HasIndex("FournisseurId");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Fournissuer", b =>
                {
                    b.Property<int>("Identifiant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifiant"));

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Identifiant");

                    b.ToTable("Fournissuers");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Produit", b =>
                {
                    b.Property<int>("ProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduitId"));

                    b.Property<int>("CategorieFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateProd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("TypeProduit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProduitId");

                    b.HasIndex("CategorieFk");

                    b.ToTable("Produits");

                    b.HasDiscriminator<string>("TypeProduit").HasValue("Produit");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Biologique", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Produit");

                    b.Property<string>("Composition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Biologique");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Chimique", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Produit");

                    b.Property<string>("NomLab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Chimique");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Facture", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Fournissuer", "Fournisseur")
                        .WithMany("Facture")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Produit", "Produit")
                        .WithMany("Facture")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Produit", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Catagorie", "Categorie")
                        .WithMany("ProduitList")
                        .HasForeignKey("CategorieFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Catagorie", b =>
                {
                    b.Navigation("ProduitList");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Fournissuer", b =>
                {
                    b.Navigation("Facture");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Produit", b =>
                {
                    b.Navigation("Facture");
                });
#pragma warning restore 612, 618
        }
    }
}
